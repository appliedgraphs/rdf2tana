#!/usr/bin/env bash
# rdf2tana-debug - Debug version of the RDF to Tana transformer
# Usage: ./scripts/rdf2tana-debug <shapes_file> <data_file> [output_file] [debug_categories]

set -e

# Display usage information if not enough arguments
if [ "$#" -lt 2 ]; then
    echo "Usage: $0 <shapes_file> <data_file> [output_file] [debug_categories]"
    echo ""
    echo "Arguments:"
    echo "  shapes_file      Path to the SHACL shapes file (required)"
    echo "  data_file        Path to the RDF data file (required)"
    echo "  output_file      Output file path (optional, defaults to tana-import.json)"
    echo "  debug_categories Debug categories to enable (optional, defaults to all)"
    echo "                   Examples: schema,instance,perf"
    echo ""
    echo "Examples:"
    echo "  $0 examples/people-org/shapes.ttl examples/people-org/instances.ttl"
    echo "  $0 examples/restaurant/shapes.ttl examples/restaurant/instances.ttl my-output.json schema,perf"
    exit 1
fi

# Set variables from arguments
SHAPES_FILE="$1"
DATA_FILE="$2"
OUTPUT_FILE="${3:-tana-import.json}"  # Default to tana-import.json if not provided
DEBUG_CATS="${4:-*}"                  # Default to all categories if not provided

# Check if files exist
if [ ! -f "$SHAPES_FILE" ]; then
    echo "Error: Shapes file not found: $SHAPES_FILE"
    exit 1
fi

if [ ! -f "$DATA_FILE" ]; then
    echo "Error: Data file not found: $DATA_FILE"
    exit 1
fi

# Display what we're doing
echo "Transforming RDF to Tana (DEBUG MODE):"
echo "  Shapes: $SHAPES_FILE"
echo "  Data:   $DATA_FILE"
echo "  Output: $OUTPUT_FILE"
echo "  Debug:  tana:$DEBUG_CATS"
echo ""

# Run the transformer with debug enabled
cd "$(dirname "$(dirname "$0")")"  # Move to project root
DEBUG="tana:$DEBUG_CATS" npm run transform -- --shapes "$SHAPES_FILE" --data "$DATA_FILE" --output "$OUTPUT_FILE"